<Window x:Class="Utilites.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:lib="clr-namespace:UserConrols;assembly=UserConrols"
        xmlns:fa="http://schemas.fontawesome.io/icons/"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:viewmodel="clr-namespace:Utilites.ViewModels"
        xmlns:validationrules="clr-namespace:Utilites.ValidationRules"
        xmlns:local="clr-namespace:Utilites"
        mc:Ignorable="d"
        Title="{Binding Title}" Height="450" Width="800" >
<Window.Resources>
    <ControlTemplate x:Key="TextBoxErrorTemplate">
        <StackPanel Orientation="Horizontal">
            <Border BorderBrush="Aqua" BorderThickness="6">
                <AdornedElementPlaceholder/>
            </Border>
            <TextBlock Foreground="Aqua" FontWeight="Bold">!</TextBlock>
        </StackPanel>
    </ControlTemplate>
    </Window.Resources>
    <Window.DataContext>
        <viewmodel:MainViewModel/>
    </Window.DataContext>
    <!--
    <Window.CommandBindings>
        <CommandBinding Command="Help"  CanExecute="CanSendMail" Executed="SendMail" />
    </Window.CommandBindings>
    -->
    <Window.InputBindings>
        <KeyBinding Key="Q" Modifiers="Control" Command="{Binding CloseWindowCommand}"/>
    </Window.InputBindings>

    <Grid ShowGridLines="True" lib:FileInputBox.FileNameChanged="FileInputBox_OnFileNameChanged">
        <Grid.RowDefinitions>
            <RowDefinition Height="39*"/>
            <RowDefinition Height="281*"/>
            <RowDefinition Height="39*"/>
        </Grid.RowDefinitions>
        <Menu Grid.Row="0">
            <MenuItem Header="Файл">
                <MenuItem Header="Exit">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Click">
                          <i:CallMethodAction MethodName="Close" 
                                              TargetObject="{Binding 
                              RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </MenuItem>
            </MenuItem>
            
            <MenuItem Header="Помощь"/>
        </Menu>
        <TabControl Grid.Row="1" x:Name="tabControl" TabStripPlacement="Right" SelectedIndex="1">
            <TabItem>
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                        <StackPanel.ToolTip>
                            <StackPanel Orientation="Horizontal">
                              <!--<Image Source="/Images/groups.ico" Width="20" HorizontalAlignment="Left"/>-->
                              <TextBlock>Формирование группы рассылки</TextBlock>
                            </StackPanel>
                        </StackPanel.ToolTip>
                        <!--<Image Source="/Images/groups.ico" Width="20" HorizontalAlignment="Left"/>-->
                        <fa:ImageAwesome Icon="Group" Height="13" Margin="2" Foreground="red"></fa:ImageAwesome>
                        <TextBlock>Группы</TextBlock>
                    </StackPanel>
                </TabItem.Header>
                <DockPanel>
                    <TextBlock>Группы</TextBlock>
                    <TextBox x:Name="tbGroup" Validation.Error="Group_Error" Validation.ErrorTemplate="{StaticResource TextBoxErrorTemplate}">
                        <TextBox.Text>
                            <Binding Path="Group" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged"   NotifyOnValidationError="True">
                                <Binding.ValidationRules>
                                    <DataErrorValidationRule/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                </DockPanel>
            </TabItem>
            <TabItem x:Name="tabInstant" IsSelected="True">
                <TabItem.InputBindings>
                    <KeyBinding Key="Q" Modifiers="Control" Command="{Binding CloseWindowCommand}"/>
                    <MouseBinding Command="{Binding MailSendCommand}" MouseAction="LeftDoubleClick"/>
                </TabItem.InputBindings>
                <TabItem.Header>

                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                        <Image Source="/Images/outbox1.png" Width="20" HorizontalAlignment="Left"/>
                        <TextBlock Margin="3">Письмо</TextBlock>
                    </StackPanel>
                </TabItem.Header>

                <StackPanel>
                    <StackPanel Orientation="Horizontal">
                    <Label Content="Название письма:" Width="auto"/>
                    <TextBox Grid.Row="1" Text="{Binding Subject}"  x:Name="tbSubject" Width="200" HorizontalAlignment="Left"/>
                    <Label Content="Прикрепить" Width="auto"/>
                        <lib:FileInputBox Width="200" HorizontalAlignment="Left"></lib:FileInputBox>
                    </StackPanel>
                    <Label Content="Содержимое письма:" Width="auto"/> 
                    <TextBox Grid.Row="1"  x:Name="tbBody" Text="{Binding Body}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="100" AcceptsReturn="True" ScrollViewer.CanContentScroll="True" ScrollViewer.VerticalScrollBarVisibility="Auto" TextWrapping="Wrap"/>
                    <Label Content="From"/>
                    <ComboBox x:Name="cbFrom" ItemsSource="{Binding Adresses}" DisplayMemberPath="AdressName" SelectedValuePath="AdressName" IsReadOnly="False" IsEditable="True" SelectedItem="{Binding FromSelectedItem}" Validation.ErrorTemplate="{StaticResource TextBoxErrorTemplate}">
                        <ComboBox.Text>

                            <Binding Path="From" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                <Binding.ValidationRules>
                                    <validationrules:EMailValidationRules/>
                                </Binding.ValidationRules>
                            </Binding>
                        </ComboBox.Text>
                    </ComboBox>
                    <Label Content="To"/>
                    <ComboBox x:Name="cbTo" ItemsSource="{Binding ToList}" IsReadOnly="False" IsEditable="True">
                        <ComboBox.Text>
                            <Binding Path="To" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" ValidatesOnExceptions="False" >
                            </Binding>
                        </ComboBox.Text>
                    </ComboBox>
                    <!--<Button   x:Name="btnSend" Width="auto" FontWeight="Medium" Content="Отправить немедленно" Click="BtnSend_Click"/>-->
                    <Button   Command="{Binding MailSendCommand}" x:Name="btnSend" Width="auto" FontWeight="Medium" Content="Отправить немедленно"/>
                    <Button   x:Name="btnAddNewMail" Width="auto" FontWeight="Medium" Content="Добавить в планировщик" Command="{Binding AddNewMail}"/>
                </StackPanel>

            </TabItem>

            <TabItem Header="Adresses">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition />
                        <RowDefinition Height="30"/>
                    </Grid.RowDefinitions>
                    <Grid Grid.Row="0" Margin="5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="70"/>
                        </Grid.ColumnDefinitions>
                        <Label Grid.Column="0" 
				Content="Adress" />
                        <TextBox Grid.Column="1" 
				  x:Name="tbAdressName"
				  VerticalContentAlignment="Center"/>
             
                        <Button Grid.Column="4" 
				Margin="5 0 5 0"
				Name="AddButton"
				Content="Добавить" Command="{Binding AddAdressCommand}" CommandParameter="{Binding ElementName=tbAdressName,Path=Text }"
				/>
                    </Grid>
                    <DataGrid x:Name="dgGrid" ItemsSource="{Binding Adresses}"
			   Grid.Row="1"
			   Margin="5"
			   AutoGenerateColumns="False"
			   IsReadOnly="True">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="ID" 
							Width="30" 
							Binding="{Binding AdressId}" />
                            <DataGridTextColumn Header="Adress" 
							Width="10*" 
							Binding="{Binding AdressName}" />
                            <DataGridTemplateColumn Header="Delete" Width="1*">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button Content="Del" Command="{Binding Path=DataContext.RemoveAdressCommand,RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type DataGrid}}}" CommandParameter="{Binding ElementName=dgGrid,Path=SelectedItem}"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                    <StatusBar Grid.Row="2">
                        <TextBlock x:Name="tbStatus"/>
                    </StatusBar>
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
    
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding ClosingCommand}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
        <i:EventTrigger EventName="Closed">
            <i:InvokeCommandAction Command="{Binding ClosedCommand}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

</Window>
